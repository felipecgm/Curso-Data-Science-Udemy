install.packages("e1071", dependencies = TRUE)
library(e1071)
credito = read.csv(file.choose(), sep = ",", header = T)
credito
fix(credito)
dim(credito)
fix(credito)
amostra = sample(2, 1000, replace = T, prob = c(0.7, 0.3))
amostra
credito_treino = credito[amostra == 1,]
credito_teste = credito[amostra == 0,]
dim(credito_teste)
dim(credito_treino)
credito_treino = credito[amostra == 1,]
credito_teste = credito[amostra == 2,]
dim(credito_treino)
dim(credito_teste)
662+328
686+314
amostra = sample(2, 1000, replace = T, prob = c(0.7, 0.3))
dim(amostra)
amostra
credito_treino = credito[amostra == 1,]
credito_teste = credito[amostra == 2,]
dim(credito_treino)
dim(credito_teste)
696+304
fix(credito_treino)
fix(credito)
fix(credito_treino)
modelo = naiveBayes(class ~ . , credito_treino)
modelo
fix(modelo)
class(modelo)
previsao = predict(modelo, credito_teste)
previsao
confusao = table(credito_teste$class, previsao)
confusao
taxa_acerto= ((confusao[1] + confusao[2]))/ sum(confusao)
taxa_acerto
taxa_acerto= ((confusao[1] + confusao[4]))/ sum(confusao)
taxa_acerto
taxa_erro = 1 - taxa_acerto
taxa_erro
)
novocredito = read.csv(file.choose(), sep = ",", header = T)
fix(novocredito)
dim(novocredito)
predict(modelo, novocredito)
predict(modelo, novocredito)
novo = predict(modelo, novocredito)
novocredito = read.csv(file.choose(), sep = ",", header = T)
fix(novocredito)
class(modelo)
previsao = predict(modelo, credito_teste)
library(e1071)
fix(credito)
dim(credito)
amostra = sample(2, 1000, replace = T, prob = c(0.7, 0.3))
credito_treino = credito[amostra == 1,]
credito_teste = credito[amostra == 2,]
modelo = naiveBayes(class ~ . , credito_treino)
previsao = predict(modelo, credito_teste)
previsao = predict(modelo, credito_teste)
novo = predict(modelo, novocredito)
novo
install.packages("rpart", dependencies = T)
library(rpart)
credito = read.csv(file.choose(), sep = ",", header = T)
fix(credito)
dim(credito)
amostra
amostra = sample(2, 1000, replace = T, prob = c(0.7, 0.3))
credito_treino = credito[amostra == 1, ]
credito_teste = credito[amostra == 2, ]
dim(credito_teste)
dim(credito_treino)
711+289
arvore = rpart(class ~ ., data = credito_treino, method = "class")
print(arvore)
plot(arvore)
text(arvore, use.n = T, all = T, cex = .8)
teste = predict(arvore, newdata = credito_teste)
teste
cred = cbind(credito_teste, teste)
fix(cred)
cred = cbind(credito_teste, teste)
fix(cred)
cred['Result'] = ifelse(cred$bad >= 0.5, "bad", "good")
fix(cred)
confusao = table(cred$class, cred$Result)
confusao
taxa_acerto = (confusao[1] + confusao[4]) / sum(confusao)
taxa_acerto
taxa_erro = 1 - taxa_acerto
taxa_erro
taxa_erro
library(e1071)
modelo = svm(class ~ ., credito_treino)
modelo
previsao = predict(modelo, credito_teste)
previsao
confusao = table(credito_teste$class,  previsao)
confusao
taxa_acerto = (confusao[1] + confusao[4])/ sum(confusao)
taxa_acerto
taxa_erro = 1 - taxa_acerto
taxa_erro
install.packages("FSelector", dependencies = T)
library(FSelector)
random.forest.importance(class ~  ., credito)
modelo = svm(class ~ checking_status + duration + credit_history + purpose, credito_treino)
previsao = predict(modelo, credito_teste)
confusao = table(credito_teste$class, previsao)
confusao
taxa_acerto2 = (confusao[1] + confusao[4])/ sum(confusao)
taxa_acerto2
install.packages("class", dependencies = T)
install.packages("class", dependencies = T)
library(class)
head(iris)
summary(iris)
dim(iris)
amostra = sample(2, 150, replace = T. prob = c(0.7, 0.3))
amostra = sample(2, 150, replace = T, prob = c(0.7, 0.3))
amostra
iris_treino = iris[amostra == 1, ]
classificar = irs[amostra == 2, ]
classificar = iris[amostra == 2, ]
dim(iris_treino)
dim(classificar)
previsao = knn(iris_treino[,1:4], classificar[,1:4], iris_treino[,5], k = 3)
confusao = table(classificar[, 5], previsao)
confusao
View(arvore)
View(classificar)
View(cred)
View(credito)
View(credito_treino)
View(iris_treino)
library(e1071)
credito = read.csv(file.choose(), sep = ",", header = T)
fix(credito)
dim(credito)
amostra = sample(2, 1000, replace = T, prob = c(0.7, 0.3))
amostra
credito_treino = credito[amostra == 1,]
credito_teste = credito[amostra == 2,]
dim(credito_teste)
fix(credito_treino)
modelo = naiveBayes(class ~ . , credito_treino)
fix(modelo)
class(modelo)
previsao = predict(modelo, credito_teste)
confusao = table(credito_teste$class, previsao)
confusao
taxa_acerto= ((confusao[1] + confusao[4]))/ sum(confusao)
taxa_acerto
taxa_erro = 1 - taxa_acerto
taxa_erro
novocredito = read.csv(file.choose(), sep = ",", header = T)
fix(novocredito)
dim(novocredito)
novo = predict(modelo, novocredito)
novo
fix(credito)
dim(credito)
